1. Development Environment Setup
Set Up Virtual Machine:
Install VirtualBox (or VMware) on your host machine.
Create a new VM with Ubuntu 20.04 (or your preferred OS).
Allocate sufficient resources (e.g., 2GB RAM, 20GB disk).
Install Ubuntu, then update it: sudo apt update && sudo apt upgrade -y.
2. Install Required Software:
Install Python3 and pip: sudo apt install python3 python3-pip -y.
Install virtualenv: pip3 install virtualenv.
Install Django LTS (e.g., 4.2): pip3 install django~=4.2.
3. Configure Shared Folder:
On the host, create a folder (e.g., C:\Shared\workdir).
In VirtualBox, go to VM Settings > Shared Folders > Add Folder, name it sharing, point to C:\Shared\workdir, enable Auto-mount.
In the VM, create a mount point: sudo mkdir /mnt/sharing.
Mount it: sudo mount -t vboxsf sharing /mnt/sharing.
Verify access: ls /mnt/sharing.
4. Set Up Project Directory:
Navigate to the shared folder: cd /mnt/sharing.
Create a virtual environment: virtualenv venv.
Activate it: source venv/bin/activate.
Create the submission directory: mkdir ex && cd ex.

Project Initialization
1. Create Django Project:
Run: django-admin startproject myproject . (note the dot to keep files in ex/).
This creates manage.py and myproject/ in ex/.
2. Create Apps:
Create the main app: python manage.py startapp myapp.
Create the accounts app: python manage.py startapp accounts.
3. Initial File Structure:

ex/
├── manage.py
├── myproject/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── myapp/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── accounts/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py

Exercise-by-Exercise Implementation
Exercise 00: Anonymous Sessions
Objective: Assign random usernames to anonymous users, valid for 42 seconds, displayed in a nav element.

Run Initial Setup:
    python manage.py migrate
    python manage.py runserver

Exercise 01: User Creation
    Objective: Add registration and login pages with forms, update nav for logged-in users.

Exercise 02: Our Tips!
Objective: Create a Tip model and allow logged-in users to post tips.
    Run Migrations:
        python manage.py makemigrations
        python manage.py migrate

Exercise 03: Votes
Objective: Add voting and deletion functionality for tips.
    Run Migrations:
        python manage.py makemigrations
        python manage.py migrate

Exercise 04: Primary Use of Authorizations
Objective: Restrict tip deletion to users with permission or the author.
    Run Migrations:
        python manage.py makemigrations
        python manage.py migrate
        Create a superuser: python manage.py createsuperuser (e.g., username: admin, password: admin123).

Exercise 05: Personalized Authorization
Objective: Restrict downvoting to users with permission or the author.
    Run Migrations:
        python manage.py makemigrations
        python manage.py migrate

Exercise 06: Automation and Reputation
Objective: Replace User with CustomUser, implement reputation system.
    Run Migrations:
        Note: Since CustomUser replaces User, start fresh:
        Delete db.sqlite3 and all migration files in myapp/migrations/ and accounts/migrations/.
        python manage.py makemigrations
        python manage.py migrate
        python manage.py createsuperuser